import nmap
import os
import time
from zapv2 import ZAPv2

# Configuración del escáner
target_ip = "127.0.0.1"
target_url = "http://localhost"
api_key = "your-api-key"

# Escaneo de puertos
def scan_ports(target_ip):
    print("Realizando escaneo de puertos...")
    nm = nmap.PortScanner()
    nm.scan(target_ip, arguments="-p-")
    open_ports = []
    for host in nm.all_hosts():
        for port in nm[host].all_tcp():
            if nm[host].tcp(port).state() == "open":
                open_ports.append(port)
    return open_ports

# Escaneo de aplicaciones web utilizando OWASP ZAP
def scan_web_app(target_url):
    print("Iniciando el escaneo de aplicaciones web...")
    zap = ZAPv2(apikey=api_key)
    zap.urlopen(target_url)
    zap.spider.scan(target_url)
    time.sleep(5)
    zap.ascan.scan(target_url)
    while int(zap.ascan.status()) < 100:
        print("Escaneo en progreso...")
        time.sleep(5)
    results = zap.core.alerts()
    return results

# Realizar el escaneo
open_ports = scan_ports(target_ip)
if len(open_ports) > 0:
    print("Se encontraron los siguientes puertos abiertos:")
    for port in open_ports:
        print("Puerto: ", port)
    print("")
else:
    print("No se encontraron puertos abiertos.")

web_app_results = scan_web_app(target_url)
if len(web_app_results) > 0:
    print("Vulnerabilidades encontradas en la aplicación web:")
    for result in web_app_results:
        print("Tipo: ", result.get('alert'))
        print("Descripción: ", result.get('description'))
        print("URL: ", result.get('url'))
        print("")
else:
    print("No se encontraron vulnerabilidades en la aplicación web.")

# Generar el informe del escaneo
report_path = os.path.join(os.getcwd(), "vulnerability_report.html")
zap.core.htmlreport(report_path)
print("Informe generado en: ", report_path)

# Fi